# 튜플은 이뮤터블(Immutable : 읽기만 가능한) 시퀀스 자료형
# () 또는 괄호가 없으면 튜플 / 괄호를 사용하여 정의하고 각 요소는 쉼표로 구분
# 여러 개의 요소를 저장하고, 각 요소에는 인덱스를 통해 접근
# 변경할 수 없기 때문에 일련의 데이터를 안전하게 유지하고자 할 때 유용
# 함수에서 여러 개의 값을 반환하는 경우에도 자주 사용
# 패킹과 언패킹 동작을 지원함
# 요소값 삭제 안됨
# 인덱싱 및 슬라이싱 가능(내부값을 변경하는게 아니고 찾아내는거라서)

# 튜플 예시
"""
person1 = "팜하니", 20, "서울시 강남구" # 튜플임
print(type(person1))

person2 = ("팜하니", 20, "서울시 강남구") # 튜플임
print(type(person2))

num1 = 1 # 튜플아님 / 숫자라서 int
print(type(num1))

num2 = 1, # 콤마가 있어서 튜플임
print(type(num2))
"""

# 언패킹 : 묶여져 있는 데이터를 푸는 것
"""
person1 = "팜하니", 20, "서울시 강남구"

name, age, addr = person1 # 위에 정의된 person1 튜플을 나눔
print(addr) # 나눈 person1 튜플에서 3번째 값을 불러옴
"""

"""
def get_person() :
    name = "팜하니"
    age = 20
    addr = "서울시 강남구"
    return name, age, addr

info = get_person()
print(info)
"""

# 집합 : 다른 자료형의 중복을 제거할 때 주로 사용
# set()
# 순서가 없음
# 고유한 값을 가지며 값이 중복될 수 없음
# 수정 가능한 뮤터블 특성
# set은 넣을 때부터 중복이 없어짐 > 중복 제거가 따로 필요 없음

"""
s1 = {1, 2, 3, 4, 5}
s2 = {4, 5, 6, 7, 8}
"""

# 중복 제거
"""
s3 = {1, 2, 2, 3, 4, 5, 5, 6}
s4 = set([1, 1, 4, 5, 9, 10, 10])
print(s3)
print(s4)
"""

# 합집합 만들기 (union / |)
"""
s1 = {1, 2, 3, 4, 5}
s2 = {4, 5, 6, 7, 8}

print(s1.union(s2))
print(s1 | s2)
"""

# 교집합 만들기 (intersection / &)
"""
s1 = {1, 2, 3, 4, 5}
s2 = {4, 5, 6, 7, 8}

print(s1.intersection(s2))
print(s1 & s2)
"""

# 차집합 만들기 (difference / -)
# 앞에서 뒤를 뺴고 남는 것
"""
s1 = {1, 2, 3, 4, 5}
s2 = {4, 5, 6, 7, 8}

print(s1.difference(s2))
print(s1 - s2)
"""

