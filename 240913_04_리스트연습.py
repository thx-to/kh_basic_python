# 리스트 : 원소(Element)들이 연속적으로 저장되는 형태의 자료형
# 요소들이 모두 같은 자료형일 필요는 없음/크기 지정할 필요 없음 (C, JAVA의 '배열'과 다른 점, 파이썬은 배열이 없음)
# 대괄호[]로 감싸서 나타나며, 0개 이상의 원소가 저장될 수 있음
# 튜플과 마찬가지로 원소로서 또 다른 리스트를 저장할 수 있음
# 뮤터블(Mutable) 객체로서 읽고 쓰기가 가능 / 반대인 이뮤터블은 읽기만 가능(튜플이 이에 해당)

# 리스트의 다양한 형태
"""
number = [1, 2, 3, 4, 5]
fruits = ["apple", "banana", "orange"]
mixed = [1, 100, "apple", True, ["seul", "korea"], ["킴민지", "팜하니", "모다니", "강해ㄹㄹ린이상하다", "이혜인"]] # 혼합된 형태의 리스트도 가능
print(number,fruits,mixed)
print(fruits[1]) # fruits 리스트의 두번째 요소 출력
print(f"뉴진스 멤버 : {mixed[5]}") # 전체 리스트의 6번째 요소(뉴진스 멤버 리스트) 출력
print(f"{mixed[4][1]}") # 2차원 배열 / 전체 리스트의 5번째 요소(리스트) 중 2번째 요소 출력
print(f"{mixed[5][1][0]}") # 3차원 배열 / 전체 리스트의 6번째 요소(리스트) 중 2번째 요소의 1번째 문자 출력
print(f"{mixed[1:5]}") # 전체 리스트의 2번째 요소부터 5번째 요소까지 출력
print(f"{mixed[5][:2]}") # 문자열 인덱싱/슬라이싱까지도 가능 / 전체 리스트의 6번째 요소(리스트) 중 2번째 요소까지 출력
"""

# 리스트 연산자 : +, *
# 연산자 오버로딩 : 원래 성질이 있는데 다른 역할을 하게끔 사용
# 연산자 오버로딩이 있는 언어 : 파이썬, C++
"""
a = [1, 2, 3]
b = [4, 5, 6]
print(a + b)
print(a * 3) # 곱하기 연산자를 다른 방식으로 활용 / 리스트 반복
"""

# 리스트 요소 추가하기 : append, insert
# append(값) : 리스트의 끝에 값을 추가하는 함수
# insert(인덱스, 값) : 해당 위치(인덱스)에 값을 추가하는 함수
"""
a = [1, 2, 3]
a.append(4)
print(a)
a.append(99)
print(a)
a.insert(1,100)
print(a)
"""


# 리스트 제거 : pop, remove, clear
# pop 1 : 인덱스를 쓰지 않으면 마지막 인덱스 반환 및 값 삭제
"""
a = [1, 2, 3]
print(a.pop()) # 마지막 인덱스인 3 삭제
print(a) # 3 삭제된거 확인 가능
"""
# pop 2 : 인덱스를 쓰면 인덱스 위치의 데이터 삭제하고 보여줌
"""
a = [1, 2, 3]
print(a.pop(1)) # 두번째 인덱스인 2 삭제 및 삭제된 데이터 확인
print(a) # 2 삭제된거 확인 가능
"""
# pop 3 : 인덱스 범위를 벗어나면 error 출력

# remove(값) : 해당하는 값을 지움, 값이 여러개인 경우는 인덱스가 낮은 걸 지움
"""
a = [1, 2, 3]
a.remove(3) # 3을 지움
print(a)
"""

# del 리스트명[인덱스] : 인덱스 위치의 값 제거
"""
a = [1, 2, 3]
del a[0] # 인덱스로 값을 제거
print(a)
"""

# clear : 리스트 내 모든 내용을 삭제하고 빈 리스트만 남김
"""
a = [1, 2, 3]
a.clear()
print(a)
"""

# 중복 제거
# "A"는, 이미 1번째 "A"에서 list_new에 추가되어 있어서 5번째 "A"에서는 skip
"""
list_double = ["A", "B", "C", "D", "A", "D"]
list_new = []
for e in list_double : # list_double 끝까지 진행
    if e not in list_new : # list_new에 포함되지 않으면
        list_new.append(e) # list_new에 추가
print(list_new)
"""

# 리스트의 순회 / 요소로 찾기 및 인덱스로 찾기 두가지 방법

# 1) 요소로 찾기 / name이 하나하나의 요소가 됨
"""
names = ["민지", "하니", "다니엘", "해린", "혜인"]
for name in names :
    print(f"뉴진스 : {name}", end=" / ")
"""

# 2) 인덱스로 찾기 / i는 인덱스로 0, 1, 2, 3, 4, 5 각 값을 나타냄
"""
names = ["민지", "하니", "다니엘", "해린", "혜인"]
for i in range(len(names)) : # names 횟수만큼 순회
    print(f"뉴진스 : {names[i]}", end=" / ")
"""

