# 연산자 : 프로그램에서 값을 연산해야 하는 경우 사용

# 산술연산자 : 숫자형 데이터형의 연산, 문자열 산술연산도 가능 (+, *)
# 더하기(+), 빼기(-), 곱하기(*), 나누기(/), 나머지(%), //(몫), **(제곱)
# 알고리즘/프로그래밍쪽에서 나머지 연산자가 많이 쓰이므로 알아둘 것
# 파이썬에는 증감연산자 (증가++, 감소--)가 없음

"""
i = 10
j = 3
print(i + j)
print(i - j)
print(i * j)
print(i / j)
print(i % j)
print(i // j)
print(i ** j) # 10*10*10(10^3)
"""

# 수입에 세율 적용하여 세금 계산해보기
"""
TAX_RATE = 0.10 # 세율
income = int(input("당신의 수입은 얼마입니까? "))
print(f"당신이 내야 할 세금은 {income * TAX_RATE}")
"""

# 대입연산자 : 값을 변수에 대입, 위부터 이어서 연산
# =, +=, -=, *=, /=, //=, %=
# ==은 같다는 '비교연산자' 이기 때문에 잘 구별해서 사용

"""
num1 = 10
num1 += 2 # num1 = num1 + 2
print(num1)
num1 -= 10
print(num1)
num1 *= 2
print(num1)
"""

# 비교연산자 : 두개의 값을 비교하여 참과 거짓을 판별
# ==, !=(같지 않다), <=, <, >=, >
"""
a = 10
b = 20
print(a > b)
print(a < b)
print(a == b)
print(a != b)
print(a >= b)
print(a <= b)
"""

# 관계연산자 : and, or not
# and : 교집합, 둘 다 참이면 참 / () and ()
# or : 합집합, 둘 중 하나만 참이면 참 / () or ()
# not : 이전 상태를 부정(참이면 거짓, 거짓이면 참) / not()
"""
x = 10
y = 20
z = 30
result1 = (x > 0) and (x < y)
result2 = (x > 0) or (x > y)
result3 = not((x > 0) or (x > y))
print(result1)
print(result2)
print(result3)
"""

# 3항연산자 : 항이 3개인 연산자, 참과 거짓이 있는 조건문과 동일
# 조건 and 참 or 거짓 : 조건에 따라 참이되거나 거짓이됨
"""
age = int(input("나이를 입력하세요 : "))
is_adult = age > 19 and "성인" or "미성년자"
print(f"당신은 {is_adult}입니다.")
"""

# 파이썬의 조건문은 3항연산자와 if
# 3항연산자 코드가 간결하고 빠르기 때문에, REACT 등 사용 가능하기때문에 가능하면 3항연산자로 사용 (선택지가 두개일 때)
# JAVA는 switch/case 문과 if (Python의 if/else문이 이 두개를 합쳐놓은 형태)
# if 조건문 예제
"""
age = int(input("나이를 입력하세요 : "))
if age > 19 :
    print(f"당신은 성인입니다.")
else :
    print(f"당신은 미성년자입니다.")
"""

# 비트연산자 : 각 비트(0, 1)끼리 연산
# 파이썬으로 하드웨어를 제어하는게 아니기 때문에 파이썬에서 비트연산자를 할 필요는 없지만, 그래도 알아두는게 좋음
# 2진법을 이해해야 함
# R=ff0000 G=00FF00 B=0000FF W=FFFFFF B=000000


a = 10 # 00001010
b = 12 # 00001100

# & bit and : 둘 다 1이면 1
print(a & b) # 00001000 = 8
# | bit or : 둘 중 하나만 1이면 1
print(a | b) # 00001110 = 14
# ^ xor : 두 값이 다른 경우 1
print(a ^ b) # 00000110 = 6
# ~ bit 반전 : 0 > 1, 1 > 0 으로 반전, 2의 보수 표현법(반전값에 +1을 해주어 음수로 표현, 맨 앞에 - 표현으로 반전 대체)
print(~a) # -11
# shift 연산자
print(a << 1) # 00010100 = 20
