# 객체 지향 프로그래밍 (Object-Oriented Programming, OOP)
# 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 객체들의 모임으로 파악하는 컴퓨터 프로그래밍 패러다임
# 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있음
# 실제 사람들이 사는 세상과 비슷한 형태로 모델링한다는 특징
# 객체를 추상화시켜 속성(state)과 기능(behavior)으로 분류하고, 변수(variable)와 함수(function)으로 정의

# 클래스 : 함수 뿐 아니라 관련 변수까지도 한번에 묶어 관리하고 재사용할 수 있게 해줌 (설계도와 유사한 개념)
# 객체를 만들기 위한 설계도면
# 상태값을 저장하는 변수
# 동작을 규정하는 메서드가 포함
# 함수는 하나의 특정 작업을 수행하기 위해 독립적으로 설계된 프로그램 코드
# 함수 호출은 특정 작업만을 수행, 그 결과값을 계속 사용하기 위해서는 어딘가에 따로 저장해야 함
# class 키워드를 사용하여 정의
# 클래스의 이름은 파스칼표기법을 따름(첫자 대문자나 전체 대문자 표기) / 객체와 구분하기 위해 / 관례상

# 객체 : 속성과 행위로 구성된 대상 / 클래스를 실체화한 것 (클래스를 가지고 실제 물건을 만든 것)
# 클래스를 이용해 생성 가능
# 파이썬에서 클래스와 객체 없이도 대부분의 문제 해결 가능, 클래스 활용하면 손쉽게 구현 가능
# ex) 게임에서 하나의 캐릭터를 만들고 상속받아 특성이 다른 다양한 클래스 생성 가능 > 수많은 사용자가 수많은 이름으로 캐릭터를 만들어도 해당 캐릭터를 이용해 객체를 찍어냄

# 객체지향 프로그램의 특성
# 1) 상속 : 부모 클래스의 특성을 자식 클래스에 물려줌. 여러 계층 구조로 상속도 가능, 여러 부모로부터 특성을 물려받는 다중상속도 가능
# JAVA는 다중상속 지원 X, 파이썬은 다중상속 지원 O
# 2) 캡슐화 : 클래스 내부에 서로 연관이 있는 속성과 기능들을(멤버, 변수) 하나의 캡슐로 만들어 외부의 접근이 되지 않도록 값을 보호함. 게터와 세터라는 별도 함수를 만들어 접근해야 함
# JAVA나 C++에서는 캡슐화를 엄격하게 관리, 파이썬에서는 잘 동작하지 않음
# 3) 다형성 : 부모의 특성을 물려받아 그 특성을 변경하거나 개선하는 등의 행위 (메서드 오버로딩, 메서드 오버라이딩)
# 파이썬은 오버로딩이 없음 / 오버로딩은 JAVA에서 동적바인딩 관계를 만들 수 있음
# 4) 추상화 : 객체화가 되지 않는 부모로부터부터 특성을 물려받는 경우. 실제화가 되지 않은 표준이나 규격 등을 의미. (JAVA에서는 추상클래스, 인터페이스로 추상화 구현)
# 객체의 공통적인 속성과 기능을 추출하여 정의

# 파이썬에서 클래스를 사용하는 이유
# 코드 구조화
# 코드 재사용
# 상속과 다형성
# 객체 지향 설계
# 코드 유지 보수 및 확장성