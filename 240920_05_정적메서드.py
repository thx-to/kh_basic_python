# 인스턴스 메서드 : 객체로 만들어질 때 함께 만들어지는 메서드, 일반적인 메서드(기본 메서드)
# 데코레이터(@) 없이 메서드 선언하면 인스턴트 메서드

# 정적 메서드 : 클래스와 관련 있음, 객체와 무관한 독립적인 동작 수행
# @staticmethod 데코레이터를 사용해 클래스에 메서드 선언하면 해당 메서드는 정적 메서드가 되며,
# 정적 메서드는 인스턴스 메서드나 클래스 메서드와 달리 첫번째 매개 변수가 할당되지 않음
# 정적 메서드 내에서는 인스턴스/클래스 속성에 접근하거나 인스턴스/클래스 메서드 호출하는 것이 불가능
# 유틸리티 메서드 구현시 많이 사용

# 클래스 메서드 : 클래스와 관련 있음, 클래스 변수를 사용하기 위한 함수
# 클래스 메서드는 함수를 정의할 때 첫번째 인자로 클래스를 넘겨받는 cls가 필요하며, 이를 이용해 클래스 변수에 접근함
# 클래스 레벨에서 무언가를 해야할 때 사용하기 적합
# @classmethod 데코레이터를 사용해 클래스에 메서드 선언하면 해당 메서드는 클래스 메서드가 되며,
# 첫번째 매개변수로 클래스 인스턴트가 아닌 클래스 자체가 넘어옴
# 이 첫번째 매개변수의 이름은 관행적으로 cls라고 하며
# 클래스 메서드는 이 cls를 통해 클래스 속성(attribute)에 접근하거나 클래스 메서드 호출 가능
# 인스턴스 메서드와 달리 인스턴스 속성에 접근하거나 다른 인스턴스 메서드 호출하는 것은 불가능
# 팩토리 메서드 작성시 많이 사용

class Car :
    is_instance_cnt = 0 # 클래스 변수(멤버), 클래스 소속, 객체로 만들어지지 않음, 차가 몇대 만들어졌는지 확인

    # 초기화 함수
    def __init__(self, size, model) :
        self.size = size # 인스턴스 변수 생성 및 초기화
        self.model = model
        self.speed = 0 # 처음에 스피드는 0이라고 초기화 / move할 때 속도를 받을 예정
        # 생성자 내부 변수는 여기에만 써주면 됨, 위 init 괄호에 넣을 필요 없음
        # 객체를 만들 때 초기값을 받을수도 있고 안받을수도 있음
        # 이름이나 사이즈 등은(초기값) 반드시 필요함 / 스피드 필드는 굳이 필요 없음
        # 외부에서 매개변수로 전달받을지 아니면 직접 그냥 넣을지 / 0이면 따로 전달받을 필요가 없음

        Car.is_instance_cnt += 1
        # 클래스 변수 사용, self로 접근하면 안됨
        # self는 객체의 이름인데 클래스 내부에 들어올 때 사용
        # 인스턴스가 만들어질 때 클래스 속성 cnt에 1을 더함
        print(f"자동차 객체 생성 수 : {Car.is_instance_cnt}")

    def move(self, speed) : # 인스턴스 메서드
        self.speed = speed
        print(f"{self.size} {self.model}이(가) 시속 {self.speed}(으)로 달립니다.")


    @staticmethod
    # 이게 없으면 아래는 인스턴트 메시지가 되어 자동차 만들때마다 check_type이 다들어감
    # 앞에 정적메서드(@staticmethod)가 들어가서 한번만 체크하면 됨
    def check_type(code) : # 자동차와는 무관한 코드
        if(code <= 10) : print("전기차입니다.")
        elif(code <= 20) : print("가솔린차입니다.")
        elif(code <= 30) : print("디젤차입니다.")
        else : print("분류 코드가 없습니다.")


    @classmethod
    # 클래스와 관련 있는 클래스메서드
    def print_cnt(cls) : # cls 키워드는 클래스 변수에 접근할 때 매개물로 전달받아서 사용, 클래스변수(메서드)에 접근하는 경우 사용
        print(f"자동차 객체 생성 수 : {Car.is_instance_cnt}") # 지금 몇대가 생성됐는지, 생성 대수에 대해 cls로 접근


santafe = Car("중형 SUV", "산타페")
sorento = Car("중형 SUV", "쏘렌토")

santafe.move(220)
sorento.move(225)

Car.check_type(10)
Car.print_cnt() # 위에서 차를 2대 만들어서 2가 찍힘(산타페, 쏘렌토)